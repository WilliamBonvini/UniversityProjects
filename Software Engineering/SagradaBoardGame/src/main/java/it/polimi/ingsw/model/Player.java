package it.polimi.ingsw.model;import it.polimi.ingsw.exceptions.NegativeFavourPointsException;import java.util.ArrayList;import java.util.List;public class Player implements DiceContainer {    private int favourPoints;    private int id;    private Board board;    private List<Die> currentDice;    private String name;    private int privateObjective;    public Player(int id, String name) {        this.id = id;        this.name = name;        currentDice = new ArrayList<>();    }    public Player(Player otherPlayer) {        favourPoints = otherPlayer.favourPoints;        id = otherPlayer.id;        board = new Board(otherPlayer.board);        currentDice = new ArrayList<>();        for (int i = 0; i < otherPlayer.currentDice.size(); i++) {            currentDice.add(new Die(otherPlayer.currentDice.get(i)));        }        name = otherPlayer.name;        privateObjective = otherPlayer.privateObjective;    }    /**     *     * @return the ID of this player     */    public int getID() {        return id;    }    /**     * Assign the given board to the player     * @param board the board given     */    public void assignBoard(Board board) {        this.board = board;    }    /**     *     * @return the board possessed by this player     */    public Board getBoard() {        return board;    }    /**     * get the value of favour points possessed by this player     * @return the amount of favour points     */    public int getFavourPoints() {        return favourPoints;    }    /**     * Set the amount of favour points for this Player. Only a positive amount is valid     * @param favours the amount of favour points to give to this player. must be >= 0, otherwise throws an exception     * @throws NegativeFavourPointsException if the argument is invalid     */    public void setFavourPoints(int favours) {        if(favours <0)            throw new NegativeFavourPointsException();        favourPoints = favours;    }    @Override    public Die getDie(int idview) {        idview -= 1;        return currentDice.get(idview);    }    @Override    public void setDie(int idview, Die die) {        idview -= 1;        currentDice.set(idview, die);    }    @Override    public void removeDie(int idview) {        idview -= 1;        currentDice.remove(idview);    }    @Override    public List<Die> getAll() {        return currentDice;    }    /**     * Add a Die in the hands of the player     * @param die the Die to be added     */    public void addDie(Die die) {        currentDice.add(die);    }    @Override    public void removeDie(Die die) {        currentDice.remove(die);    }    @Override    public int size() {        return currentDice.size();    }    public String getName() {        return name;    }    /**     * Check if two players are actually the same player     * @param obj the player that will be tested with this     * @return if the two players are actually the same     */    public boolean equals (Object obj) {        return obj instanceof Player && this.id == ((Player) obj).getID();    }    public int getPrivateObjective() {        return privateObjective;    }    public void setPrivateObjective(int privateObjective) {        this.privateObjective = privateObjective;    }}